//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Inputs/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Crawl"",
            ""id"": ""2df64cf5-14bb-4ca8-8fb4-e989aa893e1e"",
            ""actions"": [
                {
                    ""name"": ""LeftArm"",
                    ""type"": ""Button"",
                    ""id"": ""cbc558c8-c6c6-4a4a-85c1-13d1306ba50c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightArm"",
                    ""type"": ""Button"",
                    ""id"": ""21896bff-87e7-4133-be7c-26b6b63931a6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CamLeft"",
                    ""type"": ""Button"",
                    ""id"": ""8ce0d482-0f87-474f-b95f-cb71ad83d6b4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CamRight"",
                    ""type"": ""Button"",
                    ""id"": ""901831c1-30f1-453e-b91c-15e629aaf31b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CamBehindLeft"",
                    ""type"": ""Button"",
                    ""id"": ""c5c9b32f-83c1-47b9-91b5-7ded97a57f32"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CamBehindRight"",
                    ""type"": ""Button"",
                    ""id"": ""160e563b-2d59-4778-a5fd-2e9b8028fe39"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Punch"",
                    ""type"": ""Button"",
                    ""id"": ""1e69b5d3-fe38-423b-8a46-556cfc91ca6a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Kick"",
                    ""type"": ""Button"",
                    ""id"": ""f9f2f0b8-77dc-427a-a645-c6a295bba383"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CheckMap"",
                    ""type"": ""Button"",
                    ""id"": ""f8879268-67fa-4419-b876-67857422b7ce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DooHickySwitch"",
                    ""type"": ""Button"",
                    ""id"": ""b34bea58-5a64-49f2-8c54-bdb7fe83fbb7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7be1254e-04c7-4c35-977a-abcab8112fe3"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftArm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""09f5f53e-66fd-49c0-82fe-d49df49b3775"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightArm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5f891f6d-34e0-488a-9e18-c4b2d1dc098e"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CamLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e36722d0-9910-4b9e-8292-54df1f845a4f"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CamRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ee2e68f7-73b2-4836-a50b-90173e4b06d5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CamBehindLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1cc1f28f-986e-418c-989c-7c4de8fabe63"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CamBehindRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ba90f12d-48e1-43ec-952b-b72b5944b1c1"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Punch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4d4849b3-3827-44d9-9a93-b92bedd1b931"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Kick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8b3af883-e49f-4823-959d-c247aa493758"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CheckMap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f435006a-4c8d-4f54-b763-1d646152c243"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DooHickySwitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Menu"",
            ""id"": ""ddadd364-bd3d-4721-a06a-921fa2865318"",
            ""actions"": [
                {
                    ""name"": ""PauseAndPlay"",
                    ""type"": ""Button"",
                    ""id"": ""ca8a803f-987f-4e8b-b691-7b39c1e66819"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveUp"",
                    ""type"": ""Button"",
                    ""id"": ""73c3d433-cfdf-4399-b8fa-f140749ae838"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveDown"",
                    ""type"": ""Button"",
                    ""id"": ""f9f0ca72-6177-4df6-98f2-11074846ac94"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ConfirmChoice"",
                    ""type"": ""Button"",
                    ""id"": ""7b851dcb-8633-4406-bbda-1347e898157c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""34fed939-7c77-4fb7-8918-da7cbd37ac3f"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PauseAndPlay"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2398984b-f458-4f1b-ab72-401a12ac5a43"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""77fcb116-1f28-41a8-bf24-06ef58fe19b9"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""15decc19-b410-49ce-a05c-6a63d13e4f1f"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ConfirmChoice"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fb014fa8-f892-44e4-9367-261e03a6f730"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ConfirmChoice"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Crawl
        m_Crawl = asset.FindActionMap("Crawl", throwIfNotFound: true);
        m_Crawl_LeftArm = m_Crawl.FindAction("LeftArm", throwIfNotFound: true);
        m_Crawl_RightArm = m_Crawl.FindAction("RightArm", throwIfNotFound: true);
        m_Crawl_CamLeft = m_Crawl.FindAction("CamLeft", throwIfNotFound: true);
        m_Crawl_CamRight = m_Crawl.FindAction("CamRight", throwIfNotFound: true);
        m_Crawl_CamBehindLeft = m_Crawl.FindAction("CamBehindLeft", throwIfNotFound: true);
        m_Crawl_CamBehindRight = m_Crawl.FindAction("CamBehindRight", throwIfNotFound: true);
        m_Crawl_Punch = m_Crawl.FindAction("Punch", throwIfNotFound: true);
        m_Crawl_Kick = m_Crawl.FindAction("Kick", throwIfNotFound: true);
        m_Crawl_CheckMap = m_Crawl.FindAction("CheckMap", throwIfNotFound: true);
        m_Crawl_DooHickySwitch = m_Crawl.FindAction("DooHickySwitch", throwIfNotFound: true);
        // Menu
        m_Menu = asset.FindActionMap("Menu", throwIfNotFound: true);
        m_Menu_PauseAndPlay = m_Menu.FindAction("PauseAndPlay", throwIfNotFound: true);
        m_Menu_MoveUp = m_Menu.FindAction("MoveUp", throwIfNotFound: true);
        m_Menu_MoveDown = m_Menu.FindAction("MoveDown", throwIfNotFound: true);
        m_Menu_ConfirmChoice = m_Menu.FindAction("ConfirmChoice", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Crawl
    private readonly InputActionMap m_Crawl;
    private List<ICrawlActions> m_CrawlActionsCallbackInterfaces = new List<ICrawlActions>();
    private readonly InputAction m_Crawl_LeftArm;
    private readonly InputAction m_Crawl_RightArm;
    private readonly InputAction m_Crawl_CamLeft;
    private readonly InputAction m_Crawl_CamRight;
    private readonly InputAction m_Crawl_CamBehindLeft;
    private readonly InputAction m_Crawl_CamBehindRight;
    private readonly InputAction m_Crawl_Punch;
    private readonly InputAction m_Crawl_Kick;
    private readonly InputAction m_Crawl_CheckMap;
    private readonly InputAction m_Crawl_DooHickySwitch;
    public struct CrawlActions
    {
        private @PlayerControls m_Wrapper;
        public CrawlActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftArm => m_Wrapper.m_Crawl_LeftArm;
        public InputAction @RightArm => m_Wrapper.m_Crawl_RightArm;
        public InputAction @CamLeft => m_Wrapper.m_Crawl_CamLeft;
        public InputAction @CamRight => m_Wrapper.m_Crawl_CamRight;
        public InputAction @CamBehindLeft => m_Wrapper.m_Crawl_CamBehindLeft;
        public InputAction @CamBehindRight => m_Wrapper.m_Crawl_CamBehindRight;
        public InputAction @Punch => m_Wrapper.m_Crawl_Punch;
        public InputAction @Kick => m_Wrapper.m_Crawl_Kick;
        public InputAction @CheckMap => m_Wrapper.m_Crawl_CheckMap;
        public InputAction @DooHickySwitch => m_Wrapper.m_Crawl_DooHickySwitch;
        public InputActionMap Get() { return m_Wrapper.m_Crawl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CrawlActions set) { return set.Get(); }
        public void AddCallbacks(ICrawlActions instance)
        {
            if (instance == null || m_Wrapper.m_CrawlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CrawlActionsCallbackInterfaces.Add(instance);
            @LeftArm.started += instance.OnLeftArm;
            @LeftArm.performed += instance.OnLeftArm;
            @LeftArm.canceled += instance.OnLeftArm;
            @RightArm.started += instance.OnRightArm;
            @RightArm.performed += instance.OnRightArm;
            @RightArm.canceled += instance.OnRightArm;
            @CamLeft.started += instance.OnCamLeft;
            @CamLeft.performed += instance.OnCamLeft;
            @CamLeft.canceled += instance.OnCamLeft;
            @CamRight.started += instance.OnCamRight;
            @CamRight.performed += instance.OnCamRight;
            @CamRight.canceled += instance.OnCamRight;
            @CamBehindLeft.started += instance.OnCamBehindLeft;
            @CamBehindLeft.performed += instance.OnCamBehindLeft;
            @CamBehindLeft.canceled += instance.OnCamBehindLeft;
            @CamBehindRight.started += instance.OnCamBehindRight;
            @CamBehindRight.performed += instance.OnCamBehindRight;
            @CamBehindRight.canceled += instance.OnCamBehindRight;
            @Punch.started += instance.OnPunch;
            @Punch.performed += instance.OnPunch;
            @Punch.canceled += instance.OnPunch;
            @Kick.started += instance.OnKick;
            @Kick.performed += instance.OnKick;
            @Kick.canceled += instance.OnKick;
            @CheckMap.started += instance.OnCheckMap;
            @CheckMap.performed += instance.OnCheckMap;
            @CheckMap.canceled += instance.OnCheckMap;
            @DooHickySwitch.started += instance.OnDooHickySwitch;
            @DooHickySwitch.performed += instance.OnDooHickySwitch;
            @DooHickySwitch.canceled += instance.OnDooHickySwitch;
        }

        private void UnregisterCallbacks(ICrawlActions instance)
        {
            @LeftArm.started -= instance.OnLeftArm;
            @LeftArm.performed -= instance.OnLeftArm;
            @LeftArm.canceled -= instance.OnLeftArm;
            @RightArm.started -= instance.OnRightArm;
            @RightArm.performed -= instance.OnRightArm;
            @RightArm.canceled -= instance.OnRightArm;
            @CamLeft.started -= instance.OnCamLeft;
            @CamLeft.performed -= instance.OnCamLeft;
            @CamLeft.canceled -= instance.OnCamLeft;
            @CamRight.started -= instance.OnCamRight;
            @CamRight.performed -= instance.OnCamRight;
            @CamRight.canceled -= instance.OnCamRight;
            @CamBehindLeft.started -= instance.OnCamBehindLeft;
            @CamBehindLeft.performed -= instance.OnCamBehindLeft;
            @CamBehindLeft.canceled -= instance.OnCamBehindLeft;
            @CamBehindRight.started -= instance.OnCamBehindRight;
            @CamBehindRight.performed -= instance.OnCamBehindRight;
            @CamBehindRight.canceled -= instance.OnCamBehindRight;
            @Punch.started -= instance.OnPunch;
            @Punch.performed -= instance.OnPunch;
            @Punch.canceled -= instance.OnPunch;
            @Kick.started -= instance.OnKick;
            @Kick.performed -= instance.OnKick;
            @Kick.canceled -= instance.OnKick;
            @CheckMap.started -= instance.OnCheckMap;
            @CheckMap.performed -= instance.OnCheckMap;
            @CheckMap.canceled -= instance.OnCheckMap;
            @DooHickySwitch.started -= instance.OnDooHickySwitch;
            @DooHickySwitch.performed -= instance.OnDooHickySwitch;
            @DooHickySwitch.canceled -= instance.OnDooHickySwitch;
        }

        public void RemoveCallbacks(ICrawlActions instance)
        {
            if (m_Wrapper.m_CrawlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICrawlActions instance)
        {
            foreach (var item in m_Wrapper.m_CrawlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CrawlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CrawlActions @Crawl => new CrawlActions(this);

    // Menu
    private readonly InputActionMap m_Menu;
    private List<IMenuActions> m_MenuActionsCallbackInterfaces = new List<IMenuActions>();
    private readonly InputAction m_Menu_PauseAndPlay;
    private readonly InputAction m_Menu_MoveUp;
    private readonly InputAction m_Menu_MoveDown;
    private readonly InputAction m_Menu_ConfirmChoice;
    public struct MenuActions
    {
        private @PlayerControls m_Wrapper;
        public MenuActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @PauseAndPlay => m_Wrapper.m_Menu_PauseAndPlay;
        public InputAction @MoveUp => m_Wrapper.m_Menu_MoveUp;
        public InputAction @MoveDown => m_Wrapper.m_Menu_MoveDown;
        public InputAction @ConfirmChoice => m_Wrapper.m_Menu_ConfirmChoice;
        public InputActionMap Get() { return m_Wrapper.m_Menu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuActions set) { return set.Get(); }
        public void AddCallbacks(IMenuActions instance)
        {
            if (instance == null || m_Wrapper.m_MenuActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MenuActionsCallbackInterfaces.Add(instance);
            @PauseAndPlay.started += instance.OnPauseAndPlay;
            @PauseAndPlay.performed += instance.OnPauseAndPlay;
            @PauseAndPlay.canceled += instance.OnPauseAndPlay;
            @MoveUp.started += instance.OnMoveUp;
            @MoveUp.performed += instance.OnMoveUp;
            @MoveUp.canceled += instance.OnMoveUp;
            @MoveDown.started += instance.OnMoveDown;
            @MoveDown.performed += instance.OnMoveDown;
            @MoveDown.canceled += instance.OnMoveDown;
            @ConfirmChoice.started += instance.OnConfirmChoice;
            @ConfirmChoice.performed += instance.OnConfirmChoice;
            @ConfirmChoice.canceled += instance.OnConfirmChoice;
        }

        private void UnregisterCallbacks(IMenuActions instance)
        {
            @PauseAndPlay.started -= instance.OnPauseAndPlay;
            @PauseAndPlay.performed -= instance.OnPauseAndPlay;
            @PauseAndPlay.canceled -= instance.OnPauseAndPlay;
            @MoveUp.started -= instance.OnMoveUp;
            @MoveUp.performed -= instance.OnMoveUp;
            @MoveUp.canceled -= instance.OnMoveUp;
            @MoveDown.started -= instance.OnMoveDown;
            @MoveDown.performed -= instance.OnMoveDown;
            @MoveDown.canceled -= instance.OnMoveDown;
            @ConfirmChoice.started -= instance.OnConfirmChoice;
            @ConfirmChoice.performed -= instance.OnConfirmChoice;
            @ConfirmChoice.canceled -= instance.OnConfirmChoice;
        }

        public void RemoveCallbacks(IMenuActions instance)
        {
            if (m_Wrapper.m_MenuActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMenuActions instance)
        {
            foreach (var item in m_Wrapper.m_MenuActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MenuActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MenuActions @Menu => new MenuActions(this);
    public interface ICrawlActions
    {
        void OnLeftArm(InputAction.CallbackContext context);
        void OnRightArm(InputAction.CallbackContext context);
        void OnCamLeft(InputAction.CallbackContext context);
        void OnCamRight(InputAction.CallbackContext context);
        void OnCamBehindLeft(InputAction.CallbackContext context);
        void OnCamBehindRight(InputAction.CallbackContext context);
        void OnPunch(InputAction.CallbackContext context);
        void OnKick(InputAction.CallbackContext context);
        void OnCheckMap(InputAction.CallbackContext context);
        void OnDooHickySwitch(InputAction.CallbackContext context);
    }
    public interface IMenuActions
    {
        void OnPauseAndPlay(InputAction.CallbackContext context);
        void OnMoveUp(InputAction.CallbackContext context);
        void OnMoveDown(InputAction.CallbackContext context);
        void OnConfirmChoice(InputAction.CallbackContext context);
    }
}
